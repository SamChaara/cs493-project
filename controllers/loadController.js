const { Datastore } = require("@google-cloud/datastore");
const common = require("./resources/projectCommon");

const datastore = new Datastore();

/*
Create a Load
Allows you to create a new load that is unassigned to a carrier boat.
POST /loads
*/
exports.create_load = async function (req, res) {
  if (!(req.body.weight && req.body.content && req.body.delivery_date)) {
    //weight, content, and delivery were not all supplied -> send 400
    res.status(400).json(common.LOAD400);
  } else {
    var loadKey = datastore.key(common.LOAD);

    //Load to be stored in DataStore
    const newLoad = {
      weight: req.body.weight,
      content: req.body.content,
      delivery_date: req.body.delivery_date,
    };

    const newEntity = {
      key: loadKey,
      data: newLoad,
    };

    await datastore.save(newEntity);

    res.status(201).json({
      id: newEntity.key.id,
      weight: newEntity.data.weight,
      content: newEntity.data.content,
      delivery_date: newEntity.data.delivery_date,
      self: req.protocol + "://" + req.get("host") + req.baseUrl + "/" + newEntity.key.id,
    });
  }
};

/*
View all Loads
View all loads and their carrier, if applicable.
GET /loads
*/
exports.list_loads = function (req, res) {
  var query = datastore.createQuery(common.LOAD).limit(common.PAGE_SIZE);

  //See if an offset was provided
  if (req.query.offset) {
    //Now start the query at the provided offset (cursor)
    query = query.start(req.query.offset);
  }

  datastore.runQuery(query, (err, entities, info) => {
    console.log(">>ERR: ", JSON.stringify(err));
    console.log(">>ENTITIES: ", JSON.stringify(entities));
    console.log(">>INFO: ", JSON.stringify(info));

    //Check to see if there are more results and a "next" link is needed
    if (info.moreResults !== Datastore.NO_MORE_RESULTS) {
      var nextLink = common.getNextLink(req, info.endCursor);
    }

    //Add the id property to each load
    entities = entities.map(common.fromDatastore);

    //Build a self link locally and assign to each load
    entities.forEach((entity) => {
      entity = common.addSelfLink(entity, req);

      //Add a self link to the carrier, if present
      if (entity.carrier) {
        entity.carrier = common.addSelfLink(entity.carrier, req, common.BASEURL_BOATS);
      }
    });

    //Only include the "next" link if the nextLink was defined above
    var pageResult = nextLink ? { loads: entities, next: nextLink } : { loads: entities };

    console.log("**Paged Result:**");
    console.log(JSON.stringify(pageResult));
    res.status(200).json(pageResult);
  });
};

/*
Delete a Load
Allows you to delete a load and remove it from its carrier boat, if applicable.
*/
exports.get_load = function (req, res) {
  var loadId = parseInt(req.params.load_id);
  var loadKey = datastore.key([common.LOAD, loadId]);

  //Query datastore and filter by the key generated by the load_id provided
  const query = datastore.createQuery(common.LOAD).filter("__key__", "=", loadKey).limit(1);

  datastore.runQuery(query, (err, entities, info) => {
    //Check for empty result set
    if (entities.length == 0) {
      res.status(404).json(common.LOAD404);
    } else {
      //[0][0] to access the query result's object only, rather than list of query results
      var targetLoad = entities[0];
      targetLoad = common.fromDatastore(targetLoad);
      targetLoad = common.addSelfLink(targetLoad, req);

      if (targetLoad.carrier) {
        targetLoad.carrier = common.addSelfLink(targetLoad.carrier, req, common.BASEURL_BOATS);
      }

      res.status(200).json(targetLoad);
    }
  });
};

exports.edit_load = function (req, res) {
  if (!(req.body.weight && req.body.content && req.body.delivery_date)) {
    //weight, content, and delivery were not all supplied -> send 400
    res.status(400).json(common.LOAD400);
  } else {
    var loadId = parseInt(req.params.load_id);
    var loadKey = datastore.key([common.LOAD, loadId]);

    const query = datastore.createQuery(common.LOAD).filter("__key__", "=", loadKey).limit(1);

    datastore.runQuery(query, (err, entities, info) => {
      //Check for empty result set
      if (entities.length == 0) {
        res.status(404).json(common.LOAD404);
      } else {
        var targetLoad = entities[0];

        targetLoad.weight = req.body.weight;
        targetLoad.content = req.body.content;
        targetLoad.delivery_date = req.body.delivery_date;

        const updatedEntity = {
          key: loadKey,
          data: targetLoad,
        };

        datastore.update(updatedEntity, (err, apiResp) => {
          if (err) {
            //No update took place -> send 404 with message
            res.status(404).json(common.LOAD404);
          } else {
            //Update was successful -> Send 200 with object in body
            res.status(200).json({
              id: updatedEntity.key.id,
              weight: updatedEntity.data.weight,
              content: updatedEntity.data.content,
              delivery_date: updatedEntity.data.delivery_date,
              self: req.protocol + "://" + req.get("host") + req.baseUrl + "/" + updatedEntity.key.id,
            });
          }
        });
      }
    });
  }
};

exports.delete_load = function (req, res) {
  var loadId = parseInt(req.params.load_id);
  var loadKey = datastore.key([common.LOAD, loadId]);

  //First check that the load isn't being carried exists
  const query = datastore.createQuery(common.LOAD).filter("__key__", "=", loadKey).limit(1);
  datastore.runQuery(query, (err, entities, info) => {
    if (entities.length == 0) {
      res.status(404).json(common.LOAD404);
    } else {
      var targetLoad = entities[0];

      //Check that the load isn't loaded on a boat
      if (targetLoad.carrier) {
        res.status(400).json({
          Error: "Load must be removed from carrier before being deleted",
        });
      } else {
        datastore.delete(loadKey, (err, apiResp) => {
          if (apiResp.indexUpdates == 0) {
            //No delete took place -> send 404 with message
            res.status(404).json(common.LOAD404);
          } else {
            //Successfully deleted -> send 204 with no body
            res.status(204).end(); //Use .end() to send response without content
          }
        });
      }
    }
  });
};
